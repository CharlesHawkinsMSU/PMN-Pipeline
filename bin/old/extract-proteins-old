#!/usr/bin/env python3

import argparse as ap
import sys

par = ap.ArgumentParser(description = 'Extract amino acid or CDS sequences from a genomic fasta file using a gff3 annotation file')
par.add_argument('-g', '--genome', metavar = 'genome.fa', required = True, help = 'Genome assembly. Should be in fasta format, uncompressed. It needs to have been indexed by samtools using the samtools faidx command.', dest = 'g')
par.add_argument('-a', '--annotation', metavar = 'annotation.gff3', required = True, help = 'Annotation in GFF3 format. Should use the same chromosome / scaffold names as appear in the genome assembly. The GFF3 file is expected to be ordered as gene > mRNA > CDS.', dest = 'a')
par.add_argument('-o', '--output', required = False, metavar = 'proteins.fa', help = 'Output file. Output will be in fasta format. If unspecified, output will be to stdout.', dest = 'o')
par.add_argument('-c', '--cds', action = 'store_true', help = 'Extract the CDS of each gene and output as nucleic acid sequences. Otherwise, each CDS will be translated and the output will be amino acid sequences.', dest = 'c')
par.add_argument('-i', '--exclude-incomplete', action = 'store_true', help = 'Exclude sequences that appear incomplete; i.e. that do not start with M and end with stop.', dest = 'i')
par.add_argument('-x', '--exclude-unknown', action = 'store_true', help = 'Exclude sequences that contian unknown amino acids.', dest = 'x')
par.add_argument('-s', '--exclude-stop', action = 'store_true', help = 'Exclude sequences with an internal stop codon.', dest = 's')
par.add_argument('-l', '--line-length', type=int, default = 100, help = 'Length of lines in output fasta. Default is 100 characters.', dest = 'l')
args = par.parse_args()

complement = {'n':'n', 'a':'t', 't':'a', 'g':'c', 'c':'g', 'u':'a', 'N':'N', 'A':'T', 'T':'A', 'G':'C', 'C':'G', 'U':'A'}
codons = {'TAA':'*', 'TAG':'*', 'TGA':'*', 'GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A', 'AGA':'R', 'AGG':'R', 'CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R', 'AAC':'N', 'AAT':'N', 'GAC':'D', 'GAT':'D', 'TGC':'C', 'TGT':'C', 'GAA':'E', 'GAG':'E', 'CAA':'Q', 'CAG':'Q', 'GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G', 'CAC':'H', 'CAT':'H', 'ATA':'I', 'ATC':'I', 'ATT':'I', 'CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L', 'TTA':'L', 'TTG':'L', 'AAA':'K', 'AAG':'K', 'ATG':'M', 'TTC':'F', 'TTT':'F', 'CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P', 'AGC':'S', 'AGT':'S', 'TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S', 'ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T', 'TGG':'W', 'TAC':'Y', 'TAT':'Y', 'GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V'}

def rev_comp(seq):
	seq = seq[::-1]	# Reverse the sequence
	seq = [complement[base] for base in seq]	# Complement the sequence
	return(''.join(seq))

def translate(cds):
	cds = cds.upper().replace('U','T') 	# Standardize the sequence (upper-case, DNA bases)
	codon_seq = [cds[i:i+3] for i in range(0, len(cds), 3)]	# Break up into codons
	aa_seq = ''.join([codons[codon] if codon in codons else 'X' for codon in codon_seq])	# Look up each codon in the translation table
	return(aa_seq)

# Parse a dictionary from a string in the form 'var1=val1;var2=val2'
def parse_dict(dict_str):
	entries = dict_str.split(';')
	dct = {}
	for entry in entries:
		key_val = entry.split('=')
		if len(key_val) != 2:
			continue
		dct[key_val[0]] = key_val[1]
	return(dct)

# Assembles a full cds from individual CDS elements. cds should be a list of tuples of the form: (start, seq, strand)
def assemble_cds(cds):
	def key_start(exon):
		return(exon[0])
	cds.sort(key=key_start)
	cds_str = ''
	for exon in cds:
		cds_str += exon[1]
	if cds[0][2] == '-':
		cds_str = rev_comp(cds_str)
	return(cds_str)

def print_cds(attr, seq):
	aa = translate(seq)
	if args.i and (aa[0] != 'M' or aa[-1] != '*'):
		return
	if args.x and 'X' in aa:
		return
	if args.s and '*' in aa[:-1]:
		return
	if not args.c:
		seq = aa
	seq = '\n'.join([seq[i:i+args.l] for i in range(0, len(seq), args.l)])
	out.write(">%s%s transcript=%s locus=%s ID=%s\n"%(attr['Name'] if 'Name' in attr else attr['ID'], ' pacid='+attr['pacid'] if 'pacid' in attr else '', attr['Name'] if 'Name' in attr else attr['ID'], attr['Parent'], attr['ID']))
	out.write('%s\n'%seq)

fai_fn = args.g + '.fai'
try:
	gen_file = open(args.g, 'r')
except IOError as e:
	sys.stderr.write('Error: Could not open genome assmebly file %s: %s\n'%(args.g, e.strerror))
	exit(1)
try:
	ann_file = open(args.a, 'r')
except IOError as e:
	sys.stderr.write('Error: Could not open annotation file %s: %s\n'%(args.a, e.strerror))
	exit(1)
try:
	fai_file = open(fai_fn, 'r')
except IOError as e:
	sys.stderr.write('Error: Could not open fasta index file %s: %s\nYou can create this file using samtools, with:\n\tsamtools faidx %s\n'%(fai_fn, e.strerror, args.g))
	exit(1)

if args.o is None:
	out = sys.stdout
else:
	try:
		out = open(args.o, 'w')
	except IOError as e:
		sys.stderr.write('Error: Could not open output file %s for writing: %s\n'%(args.o, e.strerror))
		exit(1)

# One chromosome in the fasta index (fai) file
class FaiChr:
	def __init__(self, name, length, offset, bases, chars):
		self.name = name
		self.length = int(length)
		self.offset = int(offset)
		self.bases = int(bases)
		self.nl = int(chars)-int(bases)
fai = {}	# All chromosomes in the fai indexed by chromosome name
cds = None	# A list of tuples containing info on the currently-building cds
with gen_file, ann_file, fai_file, out:
	for fai_line in fai_file:
		fai_fields = fai_line.split('\t')
		fai[fai_fields[0]] = FaiChr(fai_fields[0], fai_fields[1], fai_fields[2], fai_fields[3], fai_fields[4])
	for ann_line in ann_file:
		ann_line = ann_line.strip()
		if ann_line == '##FASTA':	# Indicates that the rest of the file is not gff3 data and should be ignored
			break
		if ann_line == '' or ann_line[0] == '#':	# Skip over comments and blank lines
			continue
		ann_fields = ann_line.split('\t')
		attr = parse_dict(ann_fields[8])
		if ann_fields[2] == 'gene':	# We've encountered a gene. That means we're done with the previous gene, so print out its info and clear things for this gene
			if cds is not None and len(cds) >= 1:
				print_cds(mRNA_attr, assemble_cds(cds))
			cds = [];
			mRNA_attr = None
			skip_alt_splicing = False
		elif ann_fields[2] == 'mRNA' or ann_fields[2] == 'transcript':	# Each transcript has one mRNA entry in the gff file. We only want the first transcript if there is more than one. We also want to save the atributes for use in naming the fasta sequence
			if mRNA_attr == None:
				mRNA_attr = attr
			else:
				skip_alt_splicing = True	# Set to True to skip over subsequence CDS's in this gene because they represent alternative splicing
		elif ann_fields[2] == 'CDS':
			if skip_alt_splicing:
				continue
			chrm = ann_fields[0]
			start = int(ann_fields[3])-1	# The -1 is because of 0-indexing vs 1-indexing
			end = int(ann_fields[4])		# -1 for 0-indexing, +1 because end is the last base rather than one past it which we want for the later subtraction to work
			stra = ann_fields[6]
			try:
				fai_entry = fai[chrm]
			except KeyError:
				sys.stderr.write('Error: Chromosome %s not found in fasta index %s\n'%(chrm, fai_fn))
				exit(1)
			# The _adj variables are adjusted for the presence of newlines in the fasta file
			start_adj = start + start//fai_entry.bases * fai_entry.nl
			end_adj = end + end//fai_entry.bases * fai_entry.nl
			len_adj = end_adj - start_adj
			gen_file.seek(fai_entry.offset+start_adj)
			seq = gen_file.read(len_adj).replace('\r','').replace('\n','')
			cds += [(start, seq, stra)]
	print_cds(mRNA_attr, assemble_cds(cds))	# Print the last gene
