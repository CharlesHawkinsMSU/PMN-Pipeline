import sys, csv, re, os
import argparse

#compare text files generated by pathways_to_validate_in_SAVI.py in order to determine which pathways should be added/removed from SAVI files

#Author: Angela July 29, 2019

parser = argparse.ArgumentParser(description='Compare text files generated by pathways_to_validate_in_SAVI.py in order to determine which pathways should be added/removed from SAVI files.')
parser.add_argument('--a', action='store', type = str, help='Find pathways that are in file a')
parser.add_argument('--b', action='store', type = str, help='Find pathways that are not in file b')
parser.add_argument('--output', action='store', type = str, help='Name of output file containing pathways that are in file a but not in file b')

args = parser.parse_args()

def compare_pathways(list_a, list_b):
	list_in_a_not_in_b = set(list_a) - set(list_b)
	list_in_a_not_in_b = list(list_in_a_not_in_b)
	return(list_in_a_not_in_b)

def get_pathways(file_a, file_b, write_outfile):
	pathways_a = []
	pathways_b = []
	with open(file_a, "r") as read_A:
		reader = csv.reader(read_A, delimiter = "\t")
		for row in reader:
			pathways_a.append(row[0])
	with open(file_b, "r") as read_B:
		reader = csv.reader(read_B, delimiter = "\t")
		for row in reader:
			pathways_b.append(row[0])
	pathways_in_a_not_in_b = compare_pathways(pathways_a, pathways_b)
	with open(write_outfile, 'w+') as newFile:
		for pathway in pathways_in_a_not_in_b:
			newFile.write(pathway + "\n")
		newFile.write("#File A = " + file_a + "\n" + "#File B = " + file_b)
	


#get_pathways("/Carnegie/DPB/Data/Shared/Labs/Rhee/Everyone/Angela/for_Jiun/pmn14_9_species/pgdb-creation-package/update_savi/metacyc_23_pathways.txt", \
# "/Carnegie/DPB/Data/Shared/Labs/Rhee/Everyone/Angela/for_Jiun/pmn14_9_species/pgdb-creation-package/update_savi/SAVI_pathways.txt", \
# "/Carnegie/DPB/Data/Shared/Labs/Rhee/Everyone/Angela/for_Jiun/pmn14_9_species/pgdb-creation-package/update_savi/test.txt")

get_pathways(args.a, args.b, args.output)