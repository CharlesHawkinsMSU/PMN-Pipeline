#!/usr/bin/env python3

from sys import stdin, stdout, stderr
import argparse as ap

par = ap.ArgumentParser(description = 'Split the input FASTA file into parts')
par.add_argument(help = 'Input fasta file, or - for stdin', dest = 'i')
par.add_argument('-o', '--output', help = 'Output prefix. Output files will be named this prefix + a number, starting from 1. Default is the input file name; required if input is from stdin', dest = 'o')
par.add_argument('-p', '--parts', type = int, help = 'Split file into P parts', dest = 'p')
par.add_argument('-s', '--seqs', type = int, help = 'Split file into files of S sequences', dest = 's')

args = par.parse_args()


if args.o is None:
	if args.i is None or args.i == '-':
		stderr.write('Error: if reading from stdin you must specify an output prefix\n')
		exit(1)
	out_prefix = args.i
else:
	out_prefix = args.o

def next_file(existing_file, file_no):
	if existing_file:
		existing_file.close()
	filename = '%s.%s'%(out_prefix, file_no)
	try:
		outfile = open(filename, 'w')
	except IOError as e:
		stderr.write('Error: Could not open output file %s for writing: %s\n'%(filename, e.strerror))
		exit(1)
	return outfile
	
if (args.p is None) + (args.s is None) != 1:
	stderr.write('Error: must supply one and only one of -s or -p\n')
	exit(1)
if args.i is None or args.i == '-':
	infile = stdin
else:
	try:
		infile = open(args.i, 'r')
	except IOError as e:
		stderr.write('Error: Could not open input file %s: %s\n'%(args.i, e.strerror))
		exit(1)

flines = infile.readlines()
seqs = 0
for fline in flines:
	if fline[0] == '>':
		seqs += 1
if args.p:
	seqs_per_file = seqs // args.p
	remainder = seqs-seqs_per_file*args.p	# If the number of sequences isn't evenly divisible by the number of parts, some parts will get an "extra" sequence. This is the number of parts that will get one
else:
	seqs_per_file = args.s
	remainder = 0

file_no = 1
seqs_in_current_file = -1
outfile = next_file(None, file_no)
for fline in flines:
	if fline[0] == '>':
		seqs_in_current_file += 1
	if seqs_in_current_file >= seqs_per_file:
		if file_no <= remainder:	# The first n output files get an extra sequence in the event that the number of sequences isn't evenly divisible by the number of output files
			seqs_in_current_file = -1
		else:
			seqs_in_current_file = 0
		file_no += 1
		outfile = next_file(outfile, file_no)
	outfile.write(fline)
